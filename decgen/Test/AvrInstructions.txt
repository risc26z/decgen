# -----------------------------------------------------------------------------
#  file     AvrInstructionsBasic.txt
#  author   Jacob M <risc26z@gmail.com>
#  created  21 Aug 2020
#
#  This file is copyrighted and licensed under the GNU LGPL, version 2.1.
#  There is absolutely no warranty for this software.  See the file COPYING
#  for further details.
# -----------------------------------------------------------------------------


%fileStart
@// This file is automatically generated.  Do not modify.
@namespace TestProject {
@    class Decoder : DecoderBase {
@        public string DecodeInstruction() {
@            ushort opcode = 0;

%rootIndentation 3

%fileEnd
@        } // function
@    } // class
@} // namespace


%enumStart
@// This file is automatically generated.  Do not modify.
@using System;
@namespace TestProject {
@	 [Flags]
@	 enum DecodeFlags {

%enumIndentation 2

%enumEnd
@	 } // enum
@} // namespace


%decodeFlags : GetDecodeFlags()


%bits 16


%flag Movw
%flag Mul
%flag Ldd
%flag Rc
%flag LdExt
%flag Ldm
%flag LpmZ
%flag Elpm
%flag Atomic
%flag Push
%flag Break
%flag Lpm
%flag Spm
%flag Jmp
%flag Ijmp
%flag Eijmp
%flag Adiw


# bit pattern ----- flag(s) ------- code fragment ------------------

0000000000000000                :   return "Nop";
00000001........    [Movw]      :   return "Movw";
00000010........    [Mul]       :   return "Muls";
000000110...0...    [Mul]       :   return "Mulsu";
000000110...1...    [Mul]       :   return "Fmul";
000000111...0...    [Mul]       :   return "Fmuls";
000000111...1...    [Mul]       :   return "Fmulsu";
000001..........                :   return "Cpc";
000101..........                :   return "Cp";
000010..........                :   return "Sbc";
000110..........                :   return "Sub";
000011..........                :   return "Add";
000111..........                :   return "Adc";
000100..........                :   return "Cpse";
001000..........                :   return "And";
001001..........                :   return "Eor";
001010..........                :   return "Or";
001011..........                :   return "Mov";
0011............                :   return "Cpi";
0100............                :   return "Subi";
0101............                :   return "Sbci";
0110............                :   return "Ori";
0111............                :   return "Andi";
10.0..0.........    [Ldd]       :   return "Ldd";
10100...........    [Rc]        :   return "LdsRc";
10.0..1.........    [Ldd]       :   return "Std";
10101...........    [Rc]        :   return "StsRc";
1001000.....0000                :   return "Lds";
1001001.....0000                :   return "Sts";
1001000.....0001    [LdExt]     :   return "LdZincr";
1001000.....1001    [LdExt]     :   return "LdYincr";
1001001.....0001    [LdExt]     :   return "StZincr";
1001001.....1001    [LdExt]     :   return "StYincr";
1001000.....0100    [LpmZ]      :   return "LpmZ";
1001000.....0110    [Elpm]      :   return "ElpmZ";
1001000.....0101    [LpmZ]      :   return "LpmZincr";
1001000.....0111    [Elpm]      :   return "ElpmZincr";
1001001.....0100    [Atomic]    :   return "Xch";
1001001.....0101    [Atomic]    :   return "Las";
1001001.....0110    [Atomic]    :   return "Lac";
1001001.....0111    [Atomic]    :   return "Lat";
1001000.....1100    [LdExt]     :   return "LdX";
1001001.....1100    [LdExt]     :   return "StX";
1001000.....1101    [LdExt]     :   return "LdXincr";
1001001.....1101    [LdExt]     :   return "StXincr";
1001000.....1110    [LdExt]     :   return "LdXdecr";
1001001.....1110    [LdExt]     :   return "StXdecr";
1001000.....1111    [Push]      :   return "Pop";
1001001.....1111    [Push]      :   return "Push";
1001010.....0000                :   return "Com";
1001010.....0001                :   return "Neg";
1001010.....0010                :   return "Swap";
1001010.....0011                :   return "Inc";
1001010.....0101                :   return "Asr";
1001010.....0110                :   return "Lsr";
1001010.....0111                :   return "Ror";
100101000...1000                :   return "Bset";
100101001...1000                :   return "Bclr";
1001010100001000                :   return "Ret";
1001010100011000                :   return "Reti";
1001010110001000                :   return "Sleep";
1001010110011000    [Break]     :   return "Break";
1001010110101000                :   return "Wdr";
1001010111001000    [Lpm]       :   return "Lpm";
1001010111011000    [Elpm]      :   return "Elpm";
1001010111101000    [Spm]       :   return "Spm";
1001010111111000    [Spm]       :   return "SpmZincr";
1001010000001001    [Ijmp]      :   return "Ijmp";
1001010000011001    [Eijmp]     :   return "Eijmp";
1001010100001001    [Ijmp]      :   return "ICall";
1001010100011001    [Eijmp]     :   return "EICall";
1001010.....1010                :   return "Dec";
10010100....1011                :   return "Des";
1001010.....110.    [Jmp]       :   return "Jmp";
1001010.....111.    [Jmp]       :   return "Call";
10010110........    [Adiw]      :   return "Adiw";
10010111........    [Adiw]      :   return "Sbiw";
10011000........                :   return "Cbi";
10011010........                :   return "Sbi";
10011001........                :   return "Sbic";
10011011........                :   return "Sbis";
100111..........    [Mul]       :   return "Mul";
10110...........                :   return "In";
10111...........                :   return "Out";
1100............                :   return "Rjmp";
1101............                :   return "Rcall";
1110............                :   return "Ldi";
111100..........                :   return "Brbs";
111101..........                :   return "Brbc";
1111100.....0...                :   return "Bld";
1111101.....0...                :   return "Bst";
1111110.....0...                :   return "Sbrc";
1111111.....0...                :   return "Sbrs";
................                :   return "Illegal";
